events {}

http {
    upstream backend {
        server certauth.idrix.fr:443;
    }

    # Server block that presents client certificate to backend. A 200 response is expected.
    server {
        listen 8080;

        location / {
            proxy_ssl_certificate       /etc/nginx/certs/client.crt;
            proxy_ssl_certificate_key   /etc/nginx/certs/client.key;

            # Testing 8080 and 8081 revealed a behaviour where request to 8081 (TLS, no client cert) after 8080 (mTLS)
            # returns 200 and the client certificate details sent in the request to 8080.
            # Likewise, request to 8080 (mTLS) after 8081 (TLS) returns a 403, suggesting that the SSL connection to
            # the backend is reused across servers. proxy_ssl_session_reuse is needed to stop this behaviour.
            proxy_ssl_session_reuse off;

            # Set SNI in Client Hello
            proxy_ssl_server_name on;
            proxy_ssl_name  $host;

            proxy_set_header Host $host;

            # proxy_ssl_protocols         TLSv1.2;
            # proxy_http_version 1.1;
            # proxy_connect_timeout 60s;
            # proxy_read_timeout 60s;
            # proxy_send_timeout 60s;
            # client_max_body_size 1m;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Host $host;
            # proxy_set_header X-Forwarded-Port $MTLS_SERVER_PORT;
            # proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_buffering on;

            proxy_pass https://backend/;
        }
    }

    # Server block that DOES NOT presents client certificate to backend. A 403 response is expected.
    server {
        listen 8081;

        location / {
            # Set SNI in Client Hello
            proxy_ssl_server_name on;
            proxy_ssl_name  $host;

            proxy_ssl_session_reuse off;

            proxy_set_header Host $host;
            proxy_pass https://backend/;
        }
    }

    server {
        listen 8443 ssl;

        ssl_client_certificate /etc/nginx/certs/ca.crt;
        ssl_verify_depth 2;
        ssl_verify_client on;

        ssl_certificate     /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }
    }
}